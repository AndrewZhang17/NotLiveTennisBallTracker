//opencv
#include <opencv2/opencv.hpp>
//C++
#include <iostream>

using namespace cv;
using namespace std;

// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
char keyboard; //input from keyboard
bool shrink = true;

			   /** Function Headers */
void processVideo(char* videoFilename);

/**
* @function main
*/
int main(int argc, char* argv[])
{
	//check for the input parameter correctness
	if (argc != 3) {
		cerr << "Incorret input list" << endl;
		cerr << "exiting..." << endl;
		return EXIT_FAILURE;
	}

	//create GUI windows
	namedWindow("Frame", WINDOW_NORMAL);
	namedWindow("FG Mask MOG 2", shrink ? WINDOW_NORMAL : WINDOW_AUTOSIZE);

	//create Background Subtractor objects
	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach

	if (strcmp(argv[1], "-vid") == 0) {
		//input data coming from a video
		processVideo(argv[2]);
	}
	else {
		//error in reading input parameters
		cerr << "Please, check the input parameters." << endl;
		cerr << "Exiting..." << endl;
		return EXIT_FAILURE;
	}
	//destroy GUI windows
	destroyAllWindows();
	return EXIT_SUCCESS;
}

/**
* @function processVideo
*/
void processVideo(char* videoFilename) {
	//create the capture object
	VideoCapture capture(videoFilename);
	if (!capture.isOpened()) {
		//error in opening the video input
		cerr << "Unable to open video file: " << videoFilename << endl;
		exit(EXIT_FAILURE);
	}
	//read input data. ESC or 'q' for quitting
	keyboard = 0;
	while (keyboard != 'q' && keyboard != 27) {
		//read the current frame
		if (!capture.read(frame)) {
			cerr << "Unable to read next frame." << endl;
			cerr << "Exiting..." << endl;
			exit(EXIT_FAILURE);
		}
		if (keyboard == 'a') {
			keyboard = waitKey(0); //press a to move to next frame
		}
		//update the background model
		pMOG2->apply(frame, fgMaskMOG2);
		//get the frame number and write it on the current frame
		stringstream ss;
		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
			cv::Scalar(255, 255, 255), -1);
		ss << capture.get(CAP_PROP_POS_FRAMES);
		string frameNumberString = ss.str();
		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
		//show the current frame and the fg masks
		imshow("Frame", frame);
		imshow("FG Mask MOG 2", fgMaskMOG2);
		//get the input from the keyboard
		if (keyboard != 'a') {
			keyboard = (char)waitKey(20);
		}
		else {
			waitKey(20);
		}
	}
	//delete capture object
	capture.release();
}

//int main(int argc, char* argv[])
//{
//	//create GUI windows
//	namedWindow("Frame");
//	namedWindow("FG Mask MOG 2");
//	//create Background Subtractor objects
//	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
//
//	VideoCapture capture(0);
//
//	while ((char)keyboard != 'q' && (char)keyboard != 27) {
//		capture.read(frame);
//		//update the background model
//		pMOG2->apply(frame, fgMaskMOG2);
//		//get the frame number and write it on the current frame
//		stringstream ss;
//		rectangle(frame, cv::Point(10, 2), cv::Point(100, 20),
//			cv::Scalar(255, 255, 255), -1);
//		ss << capture.get(CAP_PROP_POS_FRAMES);
//		string frameNumberString = ss.str();
//		putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
//			FONT_HERSHEY_SIMPLEX, 0.5, cv::Scalar(0, 0, 0));
//		//show the current frame and the fg masks
//		imshow("Frame", frame);
//		imshow("FG Mask MOG 2", fgMaskMOG2);
//		//get the input from the keyboard
//		keyboard = waitKey(30);
//	}
//
//	//destroy GUI windows
//	destroyAllWindows();
//	return EXIT_SUCCESS;
//}